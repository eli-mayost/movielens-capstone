if(!require("vroom")) install.packages("vroom")
#read_table(edx$genres, col_names=c("types")) %>%
#    separate_rows(types, sep = "\\|") %>%
#    count(types, name = "total", sort = T)
#
#edx %>% filter(genres == "(no genres listed)")
edx %>% select(genres) %>% vroom_write(path = "genres.csv", delim = ",")
read.table(pipe("sed '1d' genres.csv | tr '|' '\n' | sort | uniq -c | awk '{OFS=\",\"; print $2, $1}'"), sep = ",", col.names = c("genre", "total"))
edx %>% select(genres) %>% vroom_write(path = "genres.csv", delim = ",")
genres_df <- read.table(pipe("sed '1d' genres.csv | tr '|' '\n' | sort | uniq -c | awk '{OFS=\",\"; print $2, $1}'"),
sep = ",",
col.names = c("genre", "total"))
edx %>% select(genres) %>% vroom_write(path = "genres.csv", delim = ",")
genres_df <- read.table(pipe("sed '1d' genres.csv | tr '|' '\n' | sort | uniq -c | awk '{OFS=\",\"; print $2, $1}'"),
sep = ",",
col.names = c("genre", "total"))
genres_df
edx %>% select(genres) %>% vroom_write(path = "genres.csv", delim = ",")
genres_df <- read.table(pipe("sed '1d' genres.csv | tr '|' '\n' | sort | uniq -c | awk '{OFS=\",\"; print $2, $1}'"),
sep = ",",
col.names = c("genre", "total"))
genres_df %>% knitr::kable()
genres_df %>%
ggplot(aes(x = genre, color = genre, fill = genre)) +
geom_bar() +
scale_x_discrete(name = "genre") +
scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
genres_df %>%
ggplot(aes(x = genre, color = genre, fill = genre)) +
geom_bar() +
scale_x_discrete(name = "genre") +
#scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
genres_df %>%
ggplot(aes(x = genre, color = genre, fill = genre)) +
geom_bar(aes(y = total)) +
scale_x_discrete(name = "genre") +
#scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
genres_df %>%
ggplot(aes(x = genre, color = genre, fill = genre)) +
geom_bar(aes(y = total), stat = "identity") +
scale_x_discrete(name = "genre") +
#scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
genres_df %>%
ggplot(aes(x = genre, color = genre, fill = genre)) +
geom_bar(aes(y = total), stat = "identity") +
scale_x_discrete(name = "genre") +
scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
edx %>% filter(genre == "(no genres listed)")
edx %>% filter(genres == "(no genres listed)")
edx
edx %>% filter(genres == "no genres listed")
edx %>% filter(genres == "(no genres listed)")
library(stringr)
edx$genres
edx %>% filter(str_detect(genres, "no"))
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("glue")) install.packages("glue")
if(!require("knitr")) install.packages("knitr")
if(!require("lubridate")) install.packages("lubridate")
if(!require("ggplot2")) install.packages("ggplot2")
if(!require("vroom")) install.packages("vroom")
################################
# Create edx set, validation set
################################
# Note: this process could take a couple of minutes
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip
#dl <- tempfile()
#download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
dl <- "ml-10m.zip"
ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
# Validation set will be 10% of MovieLens data
set.seed(1)
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
edx %>% is.na() %>% any()
validation %>% is.na() %>% any()
edx %>% count(rating, name = "total")
validation %>% count(rating, name = "total")
edx %>% dim()
validation %>% dim()
edx %>% head(10) %>% knitr::kable()
tibble(users = length(unique(edx$userId)), movies = length(unique(edx$movieId))) %>%
kable()
edx %>%
mutate(rating = as.factor(rating)) %>%
ggplot(aes(x = rating, color = rating, fill = rating)) +
geom_bar() +
scale_y_discrete(name = "total", labels = scales::comma, limits = seq(0, 3000000, 500000)) +
theme_minimal()
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("glue")) install.packages("glue")
if(!require("knitr")) install.packages("knitr")
if(!require("lubridate")) install.packages("lubridate")
if(!require("ggplot2")) install.packages("ggplot2")
if(!require("vroom")) install.packages("vroom")
################################
# Create edx set, validation set
################################
# Note: this process could take a couple of minutes
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip
#dl <- tempfile()
#download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
dl <- "ml-10m.zip"
ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
# Validation set will be 10% of MovieLens data
set.seed(1)
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
edx %>% select(genres) %>% vroom_write(path = "genres.csv", delim = ",")
genres_df <- read.table(pipe("sed '1d' genres.csv | tr '|' '\n' | sort | uniq -c | awk '{OFS=\",\"; print $2, $1}'"),
sep = ",",
col.names = c("genre", "total"))
genres_df %>% knitr::kable()
edx %>% select(genres) %>% vroom_write(path = "genres.csv", delim = ",")
genres_df <- read.table(pipe("sed '1d' genres.csv | tr '|' '\n' | sort | uniq -c | awk '{OFS=\",\"; print $2, $1}'"),
sep = ",",
col.names = c("genre", "total"))
genres_df %>% knitr::kable()
genres_df %>%
#filter(! total == 7) %>%
ggplot(aes(x = genre, color = "lightgrey", fill = genre)) +
geom_bar(aes(y = total), stat = "identity") +
scale_x_discrete(name = "genre") +
scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
genres_df %>%
filter(! total == 7) %>%
ggplot(aes(x = genre, color = "lightgrey", fill = genre)) +
geom_bar(aes(y = total), stat = "identity") +
scale_x_discrete(name = "genre") +
scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
edx %>% count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins = 30, color = "lightgrey", fill = "steelblue") +
scale_x_log10() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
genres_df %>%
filter(! total == 7) %>%
ggplot(aes(x = genre, color = "grey", fill = genre)) +
geom_bar(aes(y = total), stat = "identity") +
scale_x_discrete(name = "genre") +
scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
genres_df %>%
filter(! total == 7) %>%
ggplot(aes(x = genre, color = genre, fill = genre)) +
geom_bar(aes(y = total), stat = "identity") +
scale_x_discrete(name = "genre") +
scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
genres_df %>%
filter(! total == 7) %>%
ggplot(aes(x = genre, color = "white", fill = genre)) +
geom_bar(aes(y = total), stat = "identity") +
scale_x_discrete(name = "genre") +
scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
genres_df %>%
filter(! total == 7) %>%
ggplot(aes(x = genre, fill = genre)) +
geom_bar(aes(y = total), stat = "identity") +
scale_x_discrete(name = "genre") +
scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
edx %>% count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins = 30, color = "white", fill = "steelblue") +
scale_x_log10() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
edx %>% count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins = 30, fill = "steelblue") +
scale_x_log10() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
edx %>% count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins = 30, color = "white", fill = "steelblue") +
scale_x_log10() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
edx %>% count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins = 30, color = "white", fill = "steelblue") +
scale_x_log10() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
edx %>% count(movieId) %>%
ggplot(aes(n)) +
geom_histogram(bins = 30, color = "white", fill = "steelblue") +
scale_x_log10() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
users <-
edx %>% count(userId, name = "total") %>%
filter(total >= 150)
user_bias <- edx %>%
filter(userId %in% users$userId) %>%
group_by(userId) %>%
summarise(ub = mean(rating - avg))
user_bias <- edx %>%
group_by(userId) %>%
summarise(ub = mean(rating - avg))
avg <- mean(edx$rating)
rmse_simple <- caret::RMSE(pred = avg, obs =validation$rating)
rmse_simple
user_bias <- edx %>%
group_by(userId) %>%
summarise(ub = mean(rating - avg))
data <- validation %>% select(userId, rating) %>% left_join(user_bias, by = 'userId') %>% mutate(pred= avg + ub)
user_bias_rmse <- RMSE(pred = data$pred, obs = data$rating)
user_bias_rmse
limits <- seq(50, 200, 50)
rmses <- sapply(limits, function(limit){
users <-
edx %>% count(userId, name = "total") %>%
filter(total >= limit)
user_bias <- edx %>%
filter(userId %in% users$userId) %>%
group_by(userId) %>%
summarise(ub = mean(rating - avg))
data <- validation %>%
filter(userId %in% users$userId) %>%
select(userId, rating) %>%
left_join(user_bias, by = 'userId') %>%
mutate(pred= avg + ub)
RMSE(pred = data$pred, obs = data$rating)
})
tibble(limit = limits, rmse = rmses) %>%
ggplot(aes(x = limit)) +
geom_point(aes(y = rmse), colour = "steelblue") +
theme_minimal()
users <-
edx %>% count(userId, name = "total") %>%
filter(total >= 150)
user_bias <- edx %>%
filter(userId %in% users$userId) %>%
group_by(userId) %>%
summarise(ub = mean(rating - avg))
data <- validation %>%
filter(userId %in% users$userId) %>%
left_join(user_bias, by = 'userId') %>%
mutate(pred= avg + ub)
user_bias_rmse <- RMSE(pred = data$pred, obs = data$rating)
user_bias_rmse
movie_bias <- edx %>%
group_by(movieId) %>%
summarise(mb = mean(rating - avg))
data <- validation %>%
left_join(movie_bias, by = 'movieId') %>%
mutate(pred = avg + mb)
movie_bias_rmse <- RMSE(pred = data$pred, obs = data$rating)
movie_bias_rmse
movie_bias <- edx %>%
group_by(movieId) %>%
summarise(mb = mean(rating - avg))
data <- validation %>%
left_join(movie_bias, by = 'movieId') %>%
mutate(pred = avg + mb)
movie_bias_rmse <- RMSE(pred = data$pred, obs = data$rating)
movie_bias_rmse
data <- validation %>%
select(userId, movieId, rating) %>%
left_join(movie_bias, by = 'movieId') %>%
left_join(user_bias, by = 'userId') %>%
mutate(pred = avg + ub + mb)
user_movie_bias_rmse <- RMSE(pred = data$pred, obs = data$rating, na.rm = T)
user_movie_bias_rmse
edx %>% count(year_rated)
edx %>% count(year_rated)
edx
edx <- edx %>%
mutate(year_rated = lubridate::year(as.Date(as.POSIXct(timestamp, origin="1970-01-01"))))
edx %>% count(year_rated, name = "total")
edx %>% count(year_rated, name = "total")
edx %>% count(year_rated, name = "total") %>% ggplot(aes(x = year_rated)) + geom_bar(aes(y = total), stat = "identity")
edx$year_rated
edx$year_rated %>% class()
# get needed packages on top of the one requested in teh staff's code below
if(!require("knitr")) install.packages("knitr")
if(!require("lubridate")) install.packages("lubridate")
if(!require("ggplot2")) install.packages("ggplot2")
if(!require("vroom")) install.packages("vroom")
if(!require("stringr")) install.packages("stringr")
################################
# Create edx set, validation set
################################
# Note: this process could take a couple of minutes
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
# Validation set will be 10% of MovieLens data
set.seed(1)
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
\newpage
## Data wrangling
# Checking that we do not have missing values in both sets:
edx %>% is.na() %>% any()
# Verifying that the ratings are indeed between 0.5 and 5 with 0.5 steps
edx %>% count(rating, name = "total")
validation %>% count(rating, name = "total")
# dimensions of both data sets
edx %>% dim()
validation %>% dim()
# The first 10 observations
edx %>% head(10) %>% kable()
# The number of unique users, and unique movies
tibble(users = length(unique(edx$userId)), movies = length(unique(edx$movieId))) %>% kable()
# Rating distribution:
edx %>%
mutate(rating = as.factor(rating)) %>%
ggplot(aes(x = rating, color = rating, fill = rating)) +
geom_bar() +
scale_y_discrete(name = "total", labels = scales::comma, limits = seq(0, 3000000, 500000)) +
theme_minimal()
# Genres distribution
edx %>% select(genres) %>% vroom_write(path = "genres.csv", delim = ",")
genres_df <- read.table(pipe("sed '1d' genres.csv | tr '|' '\n' | sort | uniq -c | awk '{OFS=\",\"; print $2, $1}'"),
sep = ",",
col.names = c("genre", "total"))
genres_df %>% kable()
# We remove the rows without genre, and graph the genres distribution
genres_df %>%
filter(! str_detect(genre, "\\(no")) %>%
ggplot(aes(x = genre, fill = genre)) +
geom_bar(aes(y = total), stat = "identity") +
scale_x_discrete(name = "genre") +
scale_y_continuous(name = "total", labels = scales::comma) +
coord_flip() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
# Number of ratings per year, adding a column with the year the movie was rated
edx <- edx %>%
mutate(year_rated = lubridate::year(as.Date(as.POSIXct(timestamp, origin="1970-01-01"))))
edx %>% count(year_rated, name = "total")
# As 1995 has only two ratings, we can remove 1995
edx <- edx %>% filter(! year_rated == 1995)
edx %>% count(year_rated, name = "total")
# Let's see the distribution of total of rating per user
edx %>% count(userId) %>%
ggplot(aes(n)) +
geom_histogram(bins = 30, color = "white", fill = "steelblue") +
scale_x_log10() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
# Let's do the same with the movie IDs
edx %>% count(movieId) %>%
ggplot(aes(n)) +
geom_histogram(bins = 30, color = "white", fill = "steelblue") +
scale_x_log10() +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_text(angle = -90))
### Simplest possible model
avg <- mean(edx$rating)
rmse_simple <- caret::RMSE(pred = avg, obs =validation$rating)
rmse_simple
### Introducing user activity bias
user_bias <- edx %>%
group_by(userId) %>%
summarise(ub = mean(rating - avg))
data <- validation %>% select(userId, rating) %>% left_join(user_bias, by = 'userId') %>% mutate(pred= avg + ub)
user_bias_rmse <- RMSE(pred = data$pred, obs = data$rating)
user_bias_rmse
# As there are users who have a very low number of ratings, let's try and get a
# number of ratings under which we will exclude these users
limits <- seq(50, 200, 50)
rmses <- sapply(limits, function(limit){
users <-
edx %>% count(userId, name = "total") %>%
filter(total >= limit)
user_bias <- edx %>%
filter(userId %in% users$userId) %>%
group_by(userId) %>%
summarise(ub = mean(rating - avg))
data <- validation %>%
filter(userId %in% users$userId) %>%
select(userId, rating) %>%
left_join(user_bias, by = 'userId') %>%
mutate(pred= avg + ub)
RMSE(pred = data$pred, obs = data$rating)
})
tibble(limit = limits, rmse = rmses) %>%
ggplot(aes(x = limit)) +
geom_point(aes(y = rmse), colour = "steelblue") +
theme_minimal()
# The RMSE is lowest when we filter away the users with less that 150 ratings, so we
# apply this and can see a slight improvement in our RMSE
users <-
edx %>% count(userId, name = "total") %>%
filter(total >= 150)
user_bias <- edx %>%
filter(userId %in% users$userId) %>%
group_by(userId) %>%
summarise(ub = mean(rating - avg))
data <- validation %>%
filter(userId %in% users$userId) %>%
left_join(user_bias, by = 'userId') %>%
mutate(pred= avg + ub)
user_bias_rmse <- RMSE(pred = data$pred, obs = data$rating)
user_bias_rmse
# Let's calculate a movie bias
movie_bias <- edx %>%
group_by(movieId) %>%
summarise(mb = mean(rating - avg))
data <- validation %>%
left_join(movie_bias, by = 'movieId') %>%
mutate(pred = avg + mb)
movie_bias_rmse <- RMSE(pred = data$pred, obs = data$rating)
movie_bias_rmse
# We will combine both biases
data <- validation %>%
select(userId, movieId, rating) %>%
left_join(movie_bias, by = 'movieId') %>%
left_join(user_bias, by = 'userId') %>%
mutate(pred = avg + ub + mb)
user_movie_bias_rmse <- RMSE(pred = data$pred, obs = data$rating, na.rm = T)
user_movie_bias_rmse
